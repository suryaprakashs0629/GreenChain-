<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>GREEN CHAIN</title>

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://unpkg.com/html5-qrcode@2.3.7/minified/html5-qrcode.min.js"></script>

    <style>
        :root {
            --primary-green: #2E7D32;
            --secondary-green: #66BB6A;
            --accent-gold: #FFAB00;
            --background-light: #F1F8E9; /* A very light green */
            --card-bg: rgba(255, 255, 255, 0.75); /* Semi-transparent for a modern look */
            --text-dark: #1B5E20; /* Dark green for text */
            --text-medium: #558B2F;
            --border-color: #C8E6C9;
            --shadow-color: rgba(46, 125, 50, 0.15);
            --error-red: #f44336;
            --success-green: #4CAF50;
            --primary-gradient: linear-gradient(45deg, var(--secondary-green), var(--primary-green));
            --accent-gradient: linear-gradient(45deg, #FFD54F, var(--accent-gold));
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body { 
            font-family: 'Poppins', sans-serif; 
            background-color: var(--background-light); 
            color: var(--text-medium); 
            line-height: 1.7; 
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        #emoji-background { position: fixed; top: 0; left: 0; width: 100%; height: 100vh; overflow: hidden; z-index: -1; }
        .emoji { position: absolute; bottom: -60px; font-size: 2.5rem; opacity: 0; animation: floatUp 30s linear infinite; }
        @keyframes floatUp { 0% { transform: translateY(0); opacity: 0; } 10%, 90% { opacity: 0.2; } 100% { transform: translateY(-110vh); opacity: 0; } }

        .navbar { 
            display: flex; justify-content: space-between; align-items: center; 
            padding: 15px 30px; 
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--border-color); 
            position: sticky; top: 0; z-index: 1000;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        }
        .navbar .logo { font-size: 1.8rem; font-weight: 700; color: var(--primary-green); text-decoration: none; }
        .nav-right { display: flex; align-items: center; gap: 15px; }
        .navbar .nav-links a { color: var(--text-medium); text-decoration: none; margin: 0 10px; font-weight: 500; transition: color 0.3s; position: relative; }
        .navbar .nav-links a:hover { color: var(--primary-green); }
        .navbar .nav-links a::after { content: ''; position: absolute; width: 0; height: 2px; bottom: -4px; left: 0; background-color: var(--primary-green); transition: width 0.3s; }
        .navbar .nav-links a:hover::after { width: 100%; }

        .language-selector { padding: 8px 12px; border-radius: 8px; border: 1px solid var(--border-color); background-color: #fff; font-family: 'Poppins', sans-serif; font-size: 0.9rem; }

        .page { padding: 40px 24px; max-width: 1100px; margin: 0 auto; }

        h1, h2, h3, label { display: flex; align-items: center; gap: 10px; color: var(--text-dark); }
        h1::before { content: 'üåø'; }
        h2::before { content: 'üå±'; }
        h1 { font-size: 2.4rem; font-weight: 700; } h2 { font-size: 1.5rem; } h3 { font-size: 1.2rem; }

        .tts-button { background-color: #E8F5E9; border: none; padding: 0; margin-left: auto; width: 32px; height: 32px; border-radius: 50%; flex-shrink: 0; font-size: 1rem; line-height: 1; cursor: pointer; opacity: 0.85; transition: all 0.2s; display: inline-flex; justify-content:center; align-items:center; color: var(--primary-green); }
        .tts-button:hover { opacity: 1; background: var(--primary-gradient); color: white; transform: scale(1.1) rotate(10deg); }
        
        .voice-input-btn { background-color: #E8F5E9; border: none; padding: 0; width: 36px; height: 36px; border-radius: 50%; flex-shrink: 0; font-size: 1rem; line-height: 1; cursor: pointer; transition: all 0.2s; display: inline-flex; justify-content:center; align-items:center; position: absolute; right: 8px; top: 50%; transform: translateY(-50%); color: var(--primary-green); }
        .voice-input-btn:hover { background: var(--primary-gradient); color: white; transform: translateY(-50%) scale(1.1); }
        .input-with-voice { position: relative; }
        .input-with-voice input, .input-with-voice textarea, .input-with-voice select { padding-right: 50px; }
        .input-with-voice .voice-input-btn { top: calc(50% + 4px); }
        .input-with-voice textarea ~ .voice-input-btn { top: 20px; transform: none; }


        #home-page .hero { text-align: center; padding: 80px 20px; }
        .hero h1 { font-size: 3rem; color: var(--text-dark); line-height: 1.2; font-weight: 700; justify-content: center; text-shadow: 2px 2px 10px rgba(0,0,0,0.1); }
        .hero p { font-size: 1.1rem; color: var(--text-medium); margin: 24px 0 36px 0; max-width: 720px; margin-left: auto; margin-right: auto; }

        .features-section { text-align: center; padding: 50px 20px; background-color: transparent; border-radius: 24px; margin-top: 20px; }
        .features-section h2 { font-size: 1.8rem; margin-bottom: 32px; justify-content:center; }
        .features-container { display: flex; justify-content: center; gap: 24px; flex-wrap: wrap; }
        .feature-card { 
            background: var(--card-bg); backdrop-filter: blur(5px);
            padding: 24px; border-radius: 18px; width: 280px; 
            transition: transform 0.3s ease, box-shadow 0.3s ease; 
            border: 1px solid var(--border-color);
            border-top: 5px solid var(--accent-gold); 
            box-shadow: 0 10px 30px var(--shadow-color); 
        }
        .feature-card:hover { transform: translateY(-10px); box-shadow: 0 20px 40px var(--shadow-color); }
        .feature-card .icon { font-size: 2.8rem; }
        .feature-card h3 { font-size: 1.2rem; color: var(--text-dark); margin: 15px 0 10px 0; justify-content: center; }
        .feature-card h3::before { content: none; }
        .feature-card p { color: var(--text-medium); font-size: 0.95rem; }

        button { cursor: pointer; border-radius: 12px; border: none; padding: 14px 22px; font-size: 1rem; font-weight: 500; font-family: 'Poppins', sans-serif; transition: all 0.3s ease; }
        button.cta { 
            background: var(--accent-gradient); color: var(--text-dark); 
            box-shadow: 0 5px 20px rgba(255, 171, 0, 0.3);
            animation: pulse-cta 2s infinite;
        }
        button.cta:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(255, 171, 0, 0.4); animation-play-state: paused; }
        @keyframes pulse-cta { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } }

        .page-container { display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 80vh; padding: 20px; }
        .selection-box { 
            background: var(--card-bg); backdrop-filter: blur(10px);
            padding: 32px; border-radius: 20px; 
            box-shadow: 0 15px 40px var(--shadow-color); 
            border: 1px solid var(--border-color); 
            width: 100%; max-width: 550px; text-align: center; 
        }
        .role-buttons { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-top: 20px; }
        .role-buttons button { background: var(--primary-gradient); color: white; box-shadow: 0 5px 20px var(--shadow-color); }
        .role-buttons button:hover { transform: translateY(-5px); box-shadow: 0 10px 30px var(--shadow-color); }


        section.card { 
            background: var(--card-bg); backdrop-filter: blur(10px);
            border: 1px solid var(--border-color); 
            padding: 24px; border-radius: 18px; 
            margin-bottom: 24px; 
            box-shadow: 0 12px 35px var(--shadow-color); 
            border-top: 5px solid var(--primary-green); 
        }
        .card h2 { color: var(--text-dark); margin-bottom: 16px; font-size: 1.3rem; gap: 12px; }

        label { color: var(--text-dark); display: block; margin-bottom: 8px; font-weight: 500; }
        input, textarea, select { 
            width: 100%; padding: 12px; border-radius: 10px; 
            border: 1px solid var(--border-color); 
            margin-top: 6px; font-size: 1rem; font-family: 'Poppins', sans-serif; 
            background-color: #FFFFFF;
            transition: all 0.3s;
        }
        input:focus, textarea:focus, select:focus { 
            border-color: var(--primary-green); 
            outline: none; 
            box-shadow: 0 0 0 4px rgba(46, 125, 50, 0.1); 
            background-color: #F8FFF7;
        }

        .record-details { border: 1px solid var(--border-color); border-radius: 10px; padding: 16px; margin-top: 16px; background-color: var(--background-light); color: var(--text-dark); }
        .qr-wrap { border-radius: 16px; background: #fff; padding: 10px; box-shadow: 0 5px 20px var(--shadow-color); display:inline-block; }

        .row { display:flex; gap:16px; margin-top:10px; }
        .row .col { flex:1; }
        .small { font-size:0.9rem; color:var(--text-medium); }

        .chain-entry { border-left:3px solid var(--secondary-green); padding:12px 16px; margin-bottom:12px; background-color: #FAFCF9; border-radius: 8px; position: relative; }
        .chain-entry::before { content: 'üöö'; position: absolute; left: -15px; top: 12px; background-color: var(--background-light); padding: 2px; border-radius: 50%; }
        .chain-entry:first-child::before { content: 'üßë‚Äçüåæ'; }
        .chain-entry:last-child::before { content: 'üè™'; }


        .notification { position: fixed; top: 20px; right: 20px; padding: 16px 24px; border-radius: 12px; color: white; z-index: 2000; box-shadow: 0 5px 15px rgba(0,0,0,0.2); opacity: 0; transform: translateY(-20px) scale(0.95); transition: opacity 0.3s, transform 0.3s; font-weight: 500; }
        .notification.success { background: linear-gradient(45deg, #66BB6A, #43A047); }
        .notification.error { background: linear-gradient(45deg, #EF5350, #E53935); }
        .notification.show { opacity: 1; transform: translateY(0) scale(1); }

        .voice-status { position: fixed; bottom: 20px; right: 20px; padding: 12px 18px; border-radius: 10px; background-color: var(--primary-green); color: white; z-index: 2000; opacity: 0; transform: translateY(20px); transition: opacity 0.3s, transform 0.3s; }
        .voice-status.show { opacity: 1; transform: translateY(0); }
        .voice-status.listening { background-color: var(--error-red); }

        #about-page .content-section ul { list-style: '‚úÖ '; padding-left: 20px; }
        #about-page .content-section ul li { line-height: 1.9; padding-left: 10px; margin-bottom: 8px; }
        
        @media (max-width:720px) {
            .features-container { gap: 16px; }
            .feature-card { width: 100%; max-width: 360px; }
            .row { flex-direction: column; }
            .navbar { padding: 12px; flex-direction: column; gap: 12px;}
            .hero h1 { font-size: 2.2rem; }
            .role-buttons { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div id="emoji-background"></div>
    <div id="notification-area"></div>
    <div id="voice-status" class="voice-status">Voice input: Ready</div>
    
    <div id="website-section"></div>
    <div id="role-selection-page" class="page-container" style="display: none;"></div>
    <div id="stakeholder-category-selection-page" class="page-container" style="display: none;"></div>
    <div id="login-page" class="page-container" style="display: none;"></div>
    <div id="main-app" style="display: none;"></div>

    <script>
        // --- CROP MARKET DATA (Sample Data for 50 Crops) ---
        const cropMarketData = [
            { name: "Wheat", price: 22.75 }, { name: "Paddy (Rice)", price: 20.40 },
            { name: "Maize", price: 19.50 }, { name: "Bajra", price: 23.50 },
            { name: "Jowar", price: 29.50 }, { name: "Ragi", price: 35.78 },
            { name: "Barley", price: 29.60 }, { name: "Gram (Chana)", price: 52.30 },
            { name: "Lentil (Masur)", price: 60.00 }, { name: "Pigeon Pea (Arhar/Tur)", price: 110.00 },
            { name: "Moong", price: 77.55 }, { name: "Urad", price: 85.00 },
            { name: "Groundnut", price: 58.50 }, { name: "Mustard", price: 50.50 },
            { name: "Soybean", price: 43.00 }, { name: "Sunflower", price: 64.00 },
            { name: "Sugarcane", price: 3.50 }, { name: "Cotton", price: 66.20 },
            { name: "Jute", price: 47.50 }, { name: "Potato", price: 20.00 },
            { name: "Onion", price: 25.00 }, { name: "Tomato", price: 40.00 },
            { name: "Brinjal", price: 30.00 }, { name: "Cauliflower", price: 28.00 },
            { name: "Cabbage", price: 15.00 }, { name: "Okra (Lady's Finger)", price: 35.00 },
            { name: "Peas", price: 45.00 }, { name: "Carrot", price: 32.00 },
            { name: "Radish", price: 22.00 }, { name: "Spinach", price: 18.00 },
            { name: "Ginger", price: 120.00 }, { name: "Garlic", price: 150.00 },
            { name: "Chilli", price: 80.00 }, { name: "Turmeric", price: 75.00 },
            { name: "Coriander", price: 60.00 }, { name: "Apple", price: 130.00 },
            { name: "Banana", price: 30.00 }, { name: "Mango", price: 80.00 },
            { name: "Orange", price: 60.00 }, { name: "Grapes", price: 70.00 },
            { name: "Guava", price: 50.00 }, { name: "Pineapple", price: 45.00 },
            { name: "Papaya", price: 25.00 }, { name: "Pomegranate", price: 140.00 },
            { name: "Watermelon", price: 15.00 }, { name: "Tea", price: 250.00 },
            { name: "Coffee", price: 220.00 }, { name: "Rubber", price: 170.00 },
            { name: "Coconut", price: 28.00 }, { name: "Arecanut", price: 350.00 }
        ];

        // --- TRANSLATION DATA ---
        const RAPIDAPI_KEY = 'f7d34ed18cmsh389bc5cf002046ap108867jsne8ec255e92e4';
        const translations = {
            'en-US': { 
                home: 'Home', about: 'About', contact: 'Contact', get_started: 'Get Started', 
                home_hero_title: 'Transparent Food, Trusted Journey.', home_hero_subtitle: 'Bringing clarity to the supply chain. Track your food from the farm to your table.', start_tracking_now: 'Start Tracking Now', why_green_chain: 'Why Green Chain?', 
                feature1_title: 'Traceability', feature1_desc: "Follow your food's complete journey, recorded and verifiable at every step.", 
                feature2_title: 'Transparency', feature2_desc: 'Access an immutable digital ledger that ensures total honesty and prevents fraud.', 
                feature3_title: 'Trust', feature3_desc: 'Empower customers to instantly verify the authenticity of their products.', 
                about_title_short: "Your Food's Honest Journey, Revealed! ‚ú®", about_intro_q: "Ever wonder where your food really comes from? ü§î We did too!", about_intro_p: "GREEN CHAIN swaps mystery for clarity. We track your food's entire journey‚Äîfrom the farm üßë‚Äçüåæ to your fork üçΩÔ∏è‚Äîon a secure digital chain. Our mission is to bring **Trust** and **Transparency** back to your table.", how_it_works_title: "How It Works in 3 Simple Steps:", step1_farmer_creates: "A unique digital record (and QR code!) is born with every harvest.", step2_stakeholders_update: "Every step in warehousing üßä and logistics üöö is added to the story.", step3_you_scan_see: "Use your phone to instantly view the full, verified journey!", win_for_everyone_title: "A Win for Everyone! üéâ", win_for_you: "For You: Shop with 100% confidence in your food's quality and origin.", win_for_farmers: "For Farmers: Get the recognition you deserve for your hard work.", win_for_businesses: "For Businesses: Build a brand that customers truly trust.",
                contact_title: 'Contact Us', contact_reach_out: 'Feel free to reach out to us directly or send a message below:', phone_label: 'Phone', email_label: 'Email', or_send_message: 'Or Send Us a Message', name: 'Name', message: 'Message', send_message: 'Send Message',
                select_your_role: 'Select Your Role', farmer_role: 'üßë‚Äçüåæ Farmer', stakeholder_role: 'üöö Stakeholder', shopkeeper_role: 'üè™ Shopkeeper', customer_role: 'üõí Customer', sign_in: 'Sign In', login: 'Login', logout: 'üö™ Logout', 
                farmer_dashboard_title: 'Farmer ‚Äî Submit Crop Details', farmer_name: 'Farmer Name', farm_location: 'Farm Location', crop_name: 'Crop Name', variety: 'Variety', crop_grade: 'Crop Grade (A/B/C)', quantity_kg: 'Quantity (kg)', harvest_date: 'Harvest Date', expected_price: 'Expected Price (‚Çπ/kg)', submit_and_generate_qr: 'Submit & Generate QR', record_created_successfully: 'Record Created!', record_id: 'Record ID', download_qr: 'üì• Download QR', 
                select_stakeholder_category: 'Select Stakeholder Category', warehouse_role: 'üßä Cold Storage & Warehousing', logistics_role: 'üöö Logistics',
                warehouse_dashboard_title: 'Warehouse ‚Äî Log Storage', warehouse_name: 'Warehouse Name/ID', date_in: 'Date In', date_out: 'Date Out', storage_fees: 'Storage Fees (‚Çπ)', storage_temp: 'Storage Temperature Log (¬∞C)',
                logistics_dashboard_title: 'Logistics ‚Äî Update Transport', transport_vehicle_id: 'Transport Vehicle ID', vehicle_number: 'Vehicle Number', driver_name: 'Driver Name', 
                shopkeeper_dashboard_title: 'Shopkeeper ‚Äî Log Purchase', stock_received: 'Stock Received (kg)', purchase_price: 'Selling Price (‚Çπ/kg)', spoilage_wastage: 'Spoilage/Wastage (kg)', add_purchase_to_chain: 'üîó Add to Chain', 
                customer_dashboard_title: 'Customer ‚Äî View Journey', view_record: 'üîç View Record', initial_record_details: 'Initial Details:', complete_journey: 'Journey Timeline:',
                fetch_record: 'üîç Fetch Record', fetched_record_details: 'Fetched Record Details:', update_record: 'üîó Update Record', enter_record_id: 'Enter Record ID',
                error_login_failed: 'Login failed. Check ID and password.', error_role_mismatch: 'Role mismatch. Please log in with a correct account for the selected role.', error_record_not_found: 'Record not found', error_generic: 'An error occurred', success_login: 'Login successful', success_record_created: 'Record created successfully', success_record_updated: 'Record updated successfully', success_purchase_added: 'Purchase added successfully', message_sent: 'Message sent (demo)!',
                voice_ready: 'Voice input: Ready', voice_listening: 'Listening...', voice_not_supported: 'Voice input not supported', voice_no_speech: 'No speech was detected', voice_error: 'Error occurred in speech recognition',
                price_adjusted_notification: 'Price out of range. Adjusted to be between ‚Çπ{min} and ‚Çπ{max}.'
            },
            'hi-IN': {
                home: '‡§π‡•ã‡§Æ', about: '‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç', contact: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï', get_started: '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç', home_hero_title: '‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡•Ä ‡§≠‡•ã‡§ú‡§®, ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ‡•§', home_hero_subtitle: '‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ ‡§≤‡§æ‡§®‡§æ‡•§ ‡§ñ‡•á‡§§ ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡•á‡§ú ‡§§‡§ï ‡§Ö‡§™‡§®‡•á ‡§≠‡•ã‡§ú‡§® ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§', start_tracking_now: '‡§Ö‡§¨ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç', why_green_chain: '‡§ó‡•ç‡§∞‡•Ä‡§® ‡§ö‡•á‡§® ‡§ï‡•ç‡§Ø‡•ã‡§Ç?', feature1_title: '‡§ü‡•ç‡§∞‡•à‡§∏‡•á‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä', feature1_desc: '‡§Ö‡§™‡§®‡•á ‡§≠‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§π‡§∞ ‡§ï‡§¶‡§Æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§î‡§∞ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§π‡•à‡•§', feature2_title: '‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§‡§æ', feature2_desc: '‡§è‡§ï ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•Ä‡§Ø ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§≤‡•á‡§ú‡§∞ ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç ‡§ú‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§à‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§', feature3_title: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏', feature3_desc: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§Æ‡§æ‡§£‡§ø‡§ï‡§§‡§æ ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§', 
                about_title_short: "‡§Ü‡§™‡§ï‡•á ‡§≠‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§à‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ, ‡§™‡•ç‡§∞‡§ï‡§ü! ‚ú®", about_intro_q: "‡§ï‡§≠‡•Ä ‡§∏‡•ã‡§ö‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§≠‡•ã‡§ú‡§® ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ‡§ï‡§π‡§æ‡§Å ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à? ü§î ‡§π‡§Æ‡§®‡•á ‡§≠‡•Ä ‡§∏‡•ã‡§ö‡§æ!", about_intro_p: "‡§ó‡•ç‡§∞‡•Ä‡§® ‡§ö‡•á‡§® ‡§∞‡§π‡§∏‡•ç‡§Ø ‡§ï‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§ ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§≠‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•ã‚Äî‡§ñ‡•á‡§§ üßë‚Äçüåæ ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§™‡§ï‡•Ä ‡§•‡§æ‡§≤‡•Ä üçΩÔ∏è ‡§§‡§ï‚Äî‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ ‡§™‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§Æ‡§ø‡§∂‡§® ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•á‡§ú ‡§™‡§∞ **‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏** ‡§î‡§∞ **‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§‡§æ** ‡§µ‡§æ‡§™‡§∏ ‡§≤‡§æ‡§®‡§æ ‡§π‡•à‡•§", how_it_works_title: "‡§Ø‡§π 3 ‡§Ü‡§∏‡§æ‡§® ‡§ö‡§∞‡§£‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:", step1_farmer_creates: "‡§π‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§ï ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° (‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•Ç‡§Ü‡§∞ ‡§ï‡•ã‡§°!) ‡§ï‡§æ ‡§ú‡§®‡•ç‡§Æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§", step2_stakeholders_update: "‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ üßä ‡§î‡§∞ ‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü‡§ø‡§ï‡•ç‡§∏ üöö ‡§Æ‡•á‡§Ç ‡§π‡§∞ ‡§ï‡§¶‡§Æ ‡§ï‡§π‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡•Å‡§°‡§º ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§", step3_you_scan_see: "‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§™‡•Ç‡§∞‡•Ä, ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¶‡•á‡§ñ‡•á‡§Ç!", win_for_everyone_title: "‡§∏‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•Ä‡§§! üéâ", win_for_you: "‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ö‡§™‡§®‡•á ‡§≠‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§î‡§∞ ‡§â‡§§‡•ç‡§™‡§§‡•ç‡§§‡§ø ‡§Æ‡•á‡§Ç 100% ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§", win_for_farmers: "‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§°‡§º‡•Ä ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã ‡§™‡§π‡§ö‡§æ‡§® ‡§Æ‡§ø‡§≤‡•á‡•§", win_for_businesses: "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§è‡§ï ‡§ê‡§∏‡§æ ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§¨‡§®‡§æ‡§è‡§Ç ‡§ú‡§ø‡§∏ ‡§™‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•ã‡§Ç‡•§",
                contact_title: '‡§π‡§Æ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç', contact_reach_out: '‡§π‡§Æ‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§è‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç:', phone_label: '‡§´‡§º‡•ã‡§®', email_label: '‡§à‡§Æ‡•á‡§≤', or_send_message: '‡§Ø‡§æ ‡§π‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç', name: '‡§®‡§æ‡§Æ', message: '‡§∏‡§Ç‡§¶‡•á‡§∂', send_message: '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç',
                select_your_role: '‡§Ö‡§™‡§®‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç', farmer_role: 'üßë‚Äçüåæ ‡§ï‡§ø‡§∏‡§æ‡§®', stakeholder_role: 'üöö ‡§π‡§ø‡§§‡§ß‡§æ‡§∞‡§ï', shopkeeper_role: 'üè™ ‡§¶‡•Å‡§ï‡§æ‡§®‡§¶‡§æ‡§∞', customer_role: 'üõí ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï', sign_in: '‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç', login: '‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç', logout: 'üö™ ‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü',
                farmer_dashboard_title: '‡§ï‡§ø‡§∏‡§æ‡§® ‚Äî ‡§´‡§∏‡§≤ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç', farmer_name: '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ', farm_location: '‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§®', crop_name: '‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ', variety: '‡§ï‡§ø‡§∏‡•ç‡§Æ', crop_grade: '‡§´‡§∏‡§≤ ‡§ó‡•ç‡§∞‡•á‡§° (‡§è/‡§¨‡•Ä/‡§∏‡•Ä)', quantity_kg: '‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)', harvest_date: '‡§ï‡§ü‡§æ‡§à ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ', expected_price: '‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‚Çπ/‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)', submit_and_generate_qr: '‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ QR ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç', record_created_successfully: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ!', record_id: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ü‡§à‡§°‡•Ä', download_qr: 'üì• ‡§ï‡•ç‡§Ø‡•Ç‡§Ü‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç',
                select_stakeholder_category: '‡§π‡§ø‡§§‡§ß‡§æ‡§∞‡§ï ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç', warehouse_role: 'üßä ‡§ï‡•ã‡§≤‡•ç‡§° ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§î‡§∞ ‡§µ‡•á‡§Ø‡§∞‡§π‡§æ‡§â‡§∏‡§ø‡§Ç‡§ó', logistics_role: 'üöö ‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü‡§ø‡§ï‡•ç‡§∏',
                warehouse_dashboard_title: '‡§µ‡•á‡§Ø‡§∞‡§π‡§æ‡§â‡§∏ ‚Äî ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç', warehouse_name: '‡§µ‡•á‡§Ø‡§∞‡§π‡§æ‡§â‡§∏ ‡§ï‡§æ ‡§®‡§æ‡§Æ/‡§Ü‡§à‡§°‡•Ä', date_in: '‡§Ü‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ', date_out: '‡§ú‡§æ‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ', storage_fees: '‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§∂‡•Å‡§≤‡•ç‡§ï (‚Çπ)', storage_temp: '‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§≤‡•â‡§ó (¬∞C)',
                logistics_dashboard_title: '‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü‡§ø‡§ï‡•ç‡§∏ ‚Äî ‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç', transport_vehicle_id: '‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§µ‡§æ‡§π‡§® ‡§Ü‡§à‡§°‡•Ä', vehicle_number: '‡§µ‡§æ‡§π‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ', driver_name: '‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ',
                shopkeeper_dashboard_title: '‡§¶‡•Å‡§ï‡§æ‡§®‡§¶‡§æ‡§∞ ‚Äî ‡§ñ‡§∞‡•Ä‡§¶ ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç', stock_received: '‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∏‡•ç‡§ü‡•â‡§ï (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)', purchase_price: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‚Çπ/‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)', spoilage_wastage: '‡§ñ‡§∞‡§æ‡§¨‡•Ä/‡§¨‡§∞‡•ç‡§¨‡§æ‡§¶‡•Ä (‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ)', add_purchase_to_chain: 'üîó ‡§ö‡•á‡§® ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç',
                customer_dashboard_title: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‚Äî ‡§™‡•Ç‡§∞‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§¶‡•á‡§ñ‡•á‡§Ç', view_record: 'üîç ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§¶‡•á‡§ñ‡•á‡§Ç', initial_record_details: '‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£:', complete_journey: '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø‡§∞‡•á‡§ñ‡§æ:',
                fetch_record: 'üîç ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç', fetched_record_details: '‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§µ‡§ø‡§µ‡§∞‡§£:', update_record: 'üîó ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç', enter_record_id: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
                error_login_failed: '‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤‡•§ ‡§Ü‡§à‡§°‡•Ä ‡§î‡§∞ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§', error_role_mismatch: '‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§Æ‡•á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ñ‡§æ‡§§‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ö‡§Ø‡§®‡§ø‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§ñ‡§æ‡§§‡•á ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§', error_record_not_found: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ', error_generic: '‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à', success_login: '‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤', success_record_created: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ', success_record_updated: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ', success_purchase_added: '‡§ñ‡§∞‡•Ä‡§¶ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ó‡§à', message_sent: '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ (‡§°‡•á‡§Æ‡•ã)!',
                voice_ready: '‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü: ‡§§‡•à‡§Ø‡§æ‡§∞', voice_listening: '‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...', voice_not_supported: '‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç', voice_no_speech: '‡§ï‡•ã‡§à ‡§≠‡§æ‡§∑‡§£ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡§æ', voice_error: '‡§∏‡•ç‡§™‡•Ä‡§ö ‡§∞‡§ø‡§ï‡§ó‡•ç‡§®‡§ø‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à',
                price_adjusted_notification: '‡§ï‡•Ä‡§Æ‡§§ ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à‡•§ ‚Çπ{min} ‡§î‡§∞ ‚Çπ{max} ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§'
            },
            'kn-IN': {
                home: '‡≤Æ‡≥Å‡≤ñ‡≤™‡≥Å‡≤ü', about: '‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü', contact: '‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø', get_started: '‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø', home_hero_title: '‡≤™‡≤æ‡≤∞‡≤¶‡≤∞‡≥ç‡≤∂‡≤ï ‡≤Ü‡≤π‡≤æ‡≤∞, ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏‡≤æ‡≤∞‡≥ç‡≤π ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£.', home_hero_subtitle: '‡≤∏‡≤∞‡≤¨‡≤∞‡≤æ‡≤ú‡≥Å ‡≤∏‡≤∞‡≤™‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤§‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤∞‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å. ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ú‡≤Æ‡≥Ä‡≤®‡≤ø‡≤®‡≤ø‡≤Ç‡≤¶ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≥á‡≤ú‡≤ø‡≤®‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø.', start_tracking_now: '‡≤à‡≤ó ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø', why_green_chain: '‡≤è‡≤ï‡≥Ü ‡≤ó‡≥ç‡≤∞‡≥Ä‡≤®‡≥ç ‡≤ö‡≥à‡≤®‡≥ç?', feature1_title: '‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤π‡≤ö‡≥ç‡≤ö‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü', feature1_desc: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞‡≤¶ ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤∏‡≤∞‡≤ø‡≤∏‡≤ø, ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤Ø‡≥ä‡≤Ç‡≤¶‡≥Å ‡≤π‡≤Ç‡≤§‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤¶‡≤æ‡≤ñ‡≤≤‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.', feature2_title: '‡≤™‡≤æ‡≤∞‡≤¶‡≤∞‡≥ç‡≤∂‡≤ï‡≤§‡≥Ü', feature2_desc: '‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤™‡≥ç‡≤∞‡≤æ‡≤Æ‡≤æ‡≤£‡≤ø‡≤ï‡≤§‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≥Å‡≤µ ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤¶ ‡≤°‡≤ø‡≤ú‡≤ø‡≤ü‡≤≤‡≥ç ‡≤≤‡≥Ü‡≤°‡≥ç‡≤ú‡≤∞‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤µ‡≥á‡≤∂‡≤ø‡≤∏‡≤ø.', feature3_title: '‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏', feature3_desc: '‡≤ó‡≥ç‡≤∞‡≤æ‡≤π‡≤ï‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤§‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤ó‡≤≥ ‡≤¶‡≥É‡≤¢‡≥Ä‡≤ï‡≤∞‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥á ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≥Å‡≤µ ‡≤∏‡≤æ‡≤Æ‡≤∞‡≥ç‡≤•‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤°‡≤ø.', 
                about_title_short: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞‡≤¶ ‡≤™‡≥ç‡≤∞‡≤æ‡≤Æ‡≤æ‡≤£‡≤ø‡≤ï ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£, ‡≤¨‡≤π‡≤ø‡≤∞‡≤Ç‡≤ó! ‚ú®", about_intro_q: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞ ‡≤®‡≤ø‡≤ú‡≤µ‡≤æ‡≤ó‡≤ø‡≤Ø‡≥Ç ‡≤é‡≤≤‡≥ç‡≤≤‡≤ø‡≤Ç‡≤¶ ‡≤¨‡≤∞‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤é‡≤Ç‡≤¶‡≤æ‡≤¶‡≤∞‡≥Ç ‡≤Ø‡≥ã‡≤ö‡≤ø‡≤∏‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ä‡≤∞‡≤æ? ü§î ‡≤®‡≤æ‡≤µ‡≥Å ‡≤∏‡≤π ‡≤Ø‡≥ã‡≤ö‡≤ø‡≤∏‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤µ‡≥Ü!", about_intro_p: "‡≤ó‡≥ç‡≤∞‡≥Ä‡≤®‡≥ç ‡≤ö‡≥à‡≤®‡≥ç ‡≤∞‡≤π‡≤∏‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤§‡≥Ü‡≤ó‡≤æ‡≤ó‡≤ø ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü. ‡≤®‡≤æ‡≤µ‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞‡≤¶ ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å‚Äî‡≤ú‡≤Æ‡≥Ä‡≤®‡≤ø‡≤®‡≤ø‡≤Ç‡≤¶ üßë‚Äçüåæ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤´‡≥ã‡≤∞‡≥ç‡≤ï‡≥ç‚Äå‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü üçΩÔ∏è‚Äî‡≤í‡≤Ç‡≤¶‡≥Å ‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤°‡≤ø‡≤ú‡≤ø‡≤ü‡≤≤‡≥ç ‡≤∏‡≤∞‡≤™‡≤≥‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤µ‡≥Ü. ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≥á‡≤ú‡≤ø‡≤ó‡≥Ü **‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏** ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å **‡≤™‡≤æ‡≤∞‡≤¶‡≤∞‡≥ç‡≤∂‡≤ï‡≤§‡≥Ü**‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤∞‡≤≥‡≤ø ‡≤§‡≤∞‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å ‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤¶‡≥ç‡≤¶‡≥á‡≤∂‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.", how_it_works_title: "‡≤á‡≤¶‡≥Å 3 ‡≤∏‡≤∞‡≤≥ ‡≤π‡≤Ç‡≤§‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥á‡≤ó‡≥Ü ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü:", step1_farmer_creates: "‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≤ø‡≤®‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤í‡≤Ç‡≤¶‡≥Å ‡≤Ö‡≤®‡≤®‡≥ç‡≤Ø ‡≤°‡≤ø‡≤ú‡≤ø‡≤ü‡≤≤‡≥ç ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü (‡≤Æ‡≤§‡≥ç‡≤§‡≥Å QR ‡≤ï‡≥ã‡≤°‡≥ç!) ‡≤π‡≥Å‡≤ü‡≥ç‡≤ü‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.", step2_stakeholders_update: "‡≤ó‡≥ã‡≤¶‡≤æ‡≤Æ‡≥Å üßä ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤≤‡≤æ‡≤ú‡≤ø‡≤∏‡≥ç‡≤ü‡≤ø‡≤ï‡≥ç‡≤∏‡≥ç üöö ‡≤®‡≤≤‡≥ç‡≤≤‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤π‡≤Ç‡≤§‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤•‡≥Ü‡≤ó‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.", step3_you_scan_see: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤´‡≥ã‡≤®‡≥ç ‡≤¨‡≤≥‡≤∏‡≤ø ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£, ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥á ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø!", win_for_everyone_title: "‡≤é‡≤≤‡≥ç‡≤≤‡≤∞‡≤ø‡≤ó‡≥Ç ‡≤ó‡≥Ü‡≤≤‡≥Å‡≤µ‡≥Å! üéâ", win_for_you: "‡≤®‡≤ø‡≤Æ‡≤ó‡≤æ‡≤ó‡≤ø: ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤π‡≤æ‡≤∞‡≤¶ ‡≤ó‡≥Å‡≤£‡≤Æ‡≤ü‡≥ç‡≤ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≥Ç‡≤≤‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü 100% ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤ñ‡≤∞‡≥Ä‡≤¶‡≤ø‡≤∏‡≤ø.", win_for_farmers: "‡≤∞‡≥à‡≤§‡≤∞‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø: ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∂‡≥ç‡≤∞‡≤Æ‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤Ö‡≤∞‡≥ç‡≤π‡≤µ‡≤æ‡≤¶ ‡≤Æ‡≤®‡≥ç‡≤®‡≤£‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø.", win_for_businesses: "‡≤µ‡≥ç‡≤Ø‡≤æ‡≤™‡≤æ‡≤∞‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø: ‡≤ó‡≥ç‡≤∞‡≤æ‡≤π‡≤ï‡≤∞‡≥Å ‡≤®‡≤ø‡≤ú‡≤µ‡≤æ‡≤ó‡≤ø‡≤Ø‡≥Ç ‡≤®‡≤Ç‡≤¨‡≥Å‡≤µ ‡≤¨‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤°‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤Æ‡≤ø‡≤∏‡≤ø.",
                contact_title: '‡≤®‡≤Æ‡≥ç‡≤Æ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø', contact_reach_out: '‡≤®‡≤Æ‡≥ç‡≤Æ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥á‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤≤‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤ï‡≥Ü‡≤≥‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂ ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≥Å ‡≤π‡≤ø‡≤Ç‡≤ú‡≤∞‡≤ø‡≤Ø‡≤¨‡≥á‡≤°‡≤ø:', phone_label: '‡≤´‡≥ã‡≤®‡≥ç', email_label: '‡≤á‡≤Æ‡≥á‡≤≤‡≥ç', or_send_message: '‡≤Ö‡≤•‡≤µ‡≤æ ‡≤®‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂ ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤ø', name: '‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å', message: '‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂', send_message: '‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂ ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤ø',
                select_your_role: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≤æ‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø', farmer_role: 'üßë‚Äçüåæ ‡≤∞‡≥à‡≤§', stakeholder_role: 'üöö ‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤∞‡≥ç‡≤§‡≤ø', shopkeeper_role: 'üè™ ‡≤Ö‡≤Ç‡≤ó‡≤°‡≤ø‡≤Ø‡≤µ', customer_role: 'üõí ‡≤ó‡≥ç‡≤∞‡≤æ‡≤π‡≤ï', sign_in: '‡≤∏‡≥à‡≤®‡≥ç ‡≤á‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', login: '‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç', logout: 'üö™ ‡≤≤‡≤æ‡≤ó‡≥å‡≤ü‡≥ç',
                farmer_dashboard_title: '‡≤∞‡≥à‡≤§‡≤∞‡≥Å ‚Äî ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø', farmer_name: '‡≤∞‡≥à‡≤§‡≤∞ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å', farm_location: '‡≤ú‡≤Æ‡≥Ä‡≤®‡≤ø‡≤® ‡≤∏‡≥ç‡≤•‡≤≥', crop_name: '‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤Ø ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å', variety: '‡≤§‡≤≥‡≤ø', crop_grade: '‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤ó‡≥ç‡≤∞‡≥á‡≤°‡≥ç (‡≤é/‡≤¨‡≤ø/‡≤∏‡≤ø)', quantity_kg: '‡≤™‡≥ç‡≤∞‡≤Æ‡≤æ‡≤£ (‡≤ï‡≥Ü‡≤ú‡≤ø)', harvest_date: '‡≤ï‡≥ä‡≤Ø‡≥ç‡≤≤‡≥Å ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï', expected_price: '‡≤®‡≤ø‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤§ ‡≤¨‡≥Ü‡≤≤‡≥Ü (‚Çπ/‡≤ï‡≥Ü‡≤ú‡≤ø)', submit_and_generate_qr: '‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å QR ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø', record_created_successfully: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤∏‡≥É‡≤∑‡≥ç‡≤ü‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!', record_id: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤ê‡≤°‡≤ø', download_qr: 'üì• QR ‡≤°‡≥å‡≤®‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',
                select_stakeholder_category: '‡≤™‡≤æ‡≤≤‡≥Å‡≤¶‡≤æ‡≤∞‡≤∞ ‡≤µ‡≤∞‡≥ç‡≤ó‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø', warehouse_role: 'üßä ‡≤∂‡≥Ä‡≤§‡≤≤ ‡≤∏‡≤Ç‡≤ó‡≥ç‡≤∞‡≤π ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≥á‡≤∞‡≥ç‚Äå‡≤π‡≥å‡≤∏‡≤ø‡≤Ç‡≤ó‡≥ç', logistics_role: 'üöö ‡≤≤‡≤æ‡≤ú‡≤ø‡≤∏‡≥ç‡≤ü‡≤ø‡≤ï‡≥ç‡≤∏‡≥ç',
                warehouse_dashboard_title: '‡≤µ‡≥á‡≤∞‡≥ç‚Äå‡≤π‡≥å‡≤∏‡≥ç ‚Äî ‡≤∏‡≤Ç‡≤ó‡≥ç‡≤∞‡≤π‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤≤‡≤æ‡≤ó‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', warehouse_name: '‡≤µ‡≥á‡≤∞‡≥ç‚Äå‡≤π‡≥å‡≤∏‡≥ç ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å/‡≤ê‡≤°‡≤ø', date_in: '‡≤í‡≤≥‡≤¨‡≤∞‡≥Å‡≤µ ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï', date_out: '‡≤π‡≥ä‡≤∞‡≤π‡≥ã‡≤ó‡≥Å‡≤µ ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï', storage_fees: '‡≤∏‡≤Ç‡≤ó‡≥ç‡≤∞‡≤π ‡≤∂‡≥Å‡≤≤‡≥ç‡≤ï (‚Çπ)', storage_temp: '‡≤∏‡≤Ç‡≤ó‡≥ç‡≤∞‡≤π ‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤® ‡≤≤‡≤æ‡≤ó‡≥ç (¬∞C)',
                logistics_dashboard_title: '‡≤≤‡≤æ‡≤ú‡≤ø‡≤∏‡≥ç‡≤ü‡≤ø‡≤ï‡≥ç‡≤∏‡≥ç ‚Äî ‡≤∏‡≤æ‡≤∞‡≤ø‡≤ó‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø', transport_vehicle_id: '‡≤∏‡≤æ‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤µ‡≤æ‡≤π‡≤® ‡≤ê‡≤°‡≤ø', vehicle_number: '‡≤µ‡≤æ‡≤π‡≤® ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü', driver_name: '‡≤ö‡≤æ‡≤≤‡≤ï‡≤∞ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å',
                shopkeeper_dashboard_title: '‡≤Ö‡≤Ç‡≤ó‡≤°‡≤ø‡≤Ø‡≤µ‡≤∞‡≥Å ‚Äî ‡≤ñ‡≤∞‡≥Ä‡≤¶‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤≤‡≤æ‡≤ó‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', stock_received: '‡≤∏‡≥ç‡≤ü‡≤æ‡≤ï‡≥ç ‡≤∏‡≥ç‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü (‡≤ï‡≥Ü‡≤ú‡≤ø)', purchase_price: '‡≤Æ‡≤æ‡≤∞‡≤æ‡≤ü ‡≤¨‡≥Ü‡≤≤‡≥Ü (‚Çπ/‡≤ï‡≥Ü‡≤ú‡≤ø)', spoilage_wastage: '‡≤ï‡≥Ü‡≤°‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü/‡≤µ‡≥ç‡≤Ø‡≤∞‡≥ç‡≤• (‡≤ï‡≥Ü‡≤ú‡≤ø)', add_purchase_to_chain: 'üîó ‡≤∏‡≤∞‡≤™‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø',
                customer_dashboard_title: '‡≤ó‡≥ç‡≤∞‡≤æ‡≤π‡≤ï‡≤∞‡≥Å ‚Äî ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø', view_record: 'üîç ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø', initial_record_details: '‡≤Ü‡≤∞‡≤Ç‡≤≠‡≤ø‡≤ï ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≥Å:', complete_journey: '‡≤™‡≥ç‡≤∞‡≤Ø‡≤æ‡≤£‡≤¶ ‡≤∏‡≤Æ‡≤Ø‡≤∞‡≥á‡≤ñ‡≥Ü:',
                fetch_record: 'üîç ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø', fetched_record_details: '‡≤™‡≤°‡≥Ü‡≤¶ ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≥Å:', update_record: 'üîó ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø', enter_record_id: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤ê‡≤°‡≤ø ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø',
                error_login_failed: '‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç ‡≤µ‡≤ø‡≤´‡≤≤‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤ê‡≤°‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≤æ‡≤∏‡≥ç‚Äå‡≤µ‡≤∞‡≥ç‡≤°‡≥ç ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø.', error_role_mismatch: '‡≤™‡≤æ‡≤§‡≥ç‡≤∞ ‡≤π‡≥ä‡≤Ç‡≤¶‡≤æ‡≤£‡≤ø‡≤ï‡≥Ü‡≤Ø‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤™‡≤æ‡≤§‡≥ç‡≤∞‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤∏‡≤∞‡≤ø‡≤Ø‡≤æ‡≤¶ ‡≤ñ‡≤æ‡≤§‡≥Ü‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø.', error_record_not_found: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤ï‡≤Ç‡≤°‡≥Å‡≤¨‡≤Ç‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤', error_generic: '‡≤¶‡≥ã‡≤∑ ‡≤∏‡≤Ç‡≤≠‡≤µ‡≤ø‡≤∏‡≤ø‡≤¶‡≥Ü', success_login: '‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø', success_record_created: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤∏‡≥É‡≤∑‡≥ç‡≤ü‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', success_record_updated: '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', success_purchase_added: '‡≤ñ‡≤∞‡≥Ä‡≤¶‡≤ø ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', message_sent: '‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂ ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü (‡≤°‡≥Ü‡≤Æ‡≥ä)!',
                voice_ready: '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤á‡≤®‡≥ç‡≤™‡≥Å‡≤ü‡≥ç: ‡≤∏‡≤ø‡≤¶‡≥ç‡≤ß‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', voice_listening: '‡≤ï‡≥á‡≤≥‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...', voice_not_supported: '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤á‡≤®‡≥ç‡≤™‡≥Å‡≤ü‡≥ç ‡≤¨‡≥Ü‡≤Ç‡≤¨‡≤≤‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤≤‡≥ç‡≤≤', voice_no_speech: '‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤≠‡≤æ‡≤∑‡≤£ ‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤', voice_error: '‡≤≠‡≤æ‡≤∑‡≤£ ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑ ‡≤∏‡≤Ç‡≤≠‡≤µ‡≤ø‡≤∏‡≤ø‡≤¶‡≥Ü',
                price_adjusted_notification: '‡≤¨‡≥Ü‡≤≤‡≥Ü ‡≤µ‡≥ç‡≤Ø‡≤æ‡≤™‡≥ç‡≤§‡≤ø‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤π‡≥ä‡≤∞‡≤ó‡≤ø‡≤¶‡≥Ü. ‚Çπ{min} ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‚Çπ{max} ‡≤®‡≤°‡≥Å‡≤µ‡≥Ü ‡≤∏‡≤∞‡≤ø‡≤π‡≥ä‡≤Ç‡≤¶‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.'
            }
        };

        // --- STATE MANAGEMENT ---
        let currentLanguage = 'en-US';
        let currentView = 'website-home'; // e.g., 'website-home', 'role-selection', 'app-farmer'
        let currentRole = null;
        let currentUser = null;
        let supplyChainRecords = JSON.parse(localStorage.getItem('supplyChainRecords')) || [];
        let userAccounts = JSON.parse(localStorage.getItem('userAccounts')) || [
            { id: 'farmer1', password: 'password', role: 'farmer', name: 'Rajesh Kumar' },
            { id: 'warehouse1', password: 'password', role: 'warehouse', name: 'Cold Storage Delhi' },
            { id: 'logistics1', password: 'password', role: 'logistics', name: 'Speedy Transports' },
            { id: 'shopkeeper1', password: 'password', role: 'shopkeeper', name: 'Fresh Mart' },
            { id: 'customer1', password: 'password', role: 'customer', name: 'Test Customer' }
        ];

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            createEmojiBackground();
            // Initial render of all page structures
            document.getElementById('website-section').innerHTML = getWebsiteHTML('home');
            document.getElementById('role-selection-page').innerHTML = getRoleSelectionHTML();
            document.getElementById('stakeholder-category-selection-page').innerHTML = getStakeholderCategoryHTML();
            document.getElementById('login-page').innerHTML = getLoginHTML();
            document.getElementById('main-app').innerHTML = getMainAppHTML();
            
            showView('website-home');
        });

        // --- VIEW MANAGEMENT ---
        function showView(view) {
            currentView = view;
            
            // Hide all pages first
            document.getElementById('website-section').style.display = 'none';
            document.getElementById('role-selection-page').style.display = 'none';
            document.getElementById('stakeholder-category-selection-page').style.display = 'none';
            document.getElementById('login-page').style.display = 'none';
            document.getElementById('main-app').style.display = 'none';

            if (view.startsWith('website')) {
                const subpage = view.split('-')[1]; // home, about, contact
                document.getElementById('website-section').innerHTML = getWebsiteHTML(subpage);
                document.getElementById('website-section').style.display = 'block';
            } else if (view === 'role-selection') {
                document.getElementById('role-selection-page').style.display = 'flex';
            } else if (view === 'stakeholder-category-selection') {
                document.getElementById('stakeholder-category-selection-page').style.display = 'flex';
            } else if (view === 'login') {
                document.getElementById('login-page').style.display = 'flex';
            } else if (view.startsWith('app')) {
                document.getElementById('main-app').style.display = 'block';
                renderAppContent();
            }
            updateTextForLanguage();
        }

        // --- HTML TEMPLATE FUNCTIONS ---
        // These functions return HTML strings to keep rendering logic separate
        
        function getWebsiteHTML(page) {
            const nav = `
                <div class="navbar">
                    <a href="#" class="logo" onclick="showView('website-home')">GREEN CHAIN</a>
                    <div class="nav-links">
                        <a href="#" onclick="showView('website-home')" data-translate-key="home"></a>
                        <a href="#" onclick="showView('website-about')" data-translate-key="about"></a>
                        <a href="#" onclick="showView('website-contact')" data-translate-key="contact"></a>
                    </div>
                    <div class="nav-right">
                        <select class="language-selector" onchange="changeLanguage(this.value)">
                            <option value="en-US">English</option>
                            <option value="hi-IN">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
                            <option value="kn-IN">‡≤ï‡≤®‡≥ç‡≤®‡≤°</option>
                        </select>
                        <button class="cta" onclick="showView('role-selection')" data-translate-key="get_started"></button>
                    </div>
                </div>`;

            let pageContent = '';
            if (page === 'home') {
                 pageContent = `
                    <div class="page">
                        <div class="hero">
                            <h1 data-translate-key="home_hero_title"></h1>
                            <p data-translate-key="home_hero_subtitle"></p>
                            <button class="cta" onclick="showView('role-selection')" data-translate-key="start_tracking_now"></button>
                        </div>
                        <div class="features-section">
                            <h2 data-translate-key="why_green_chain"></h2>
                            <div class="features-container">
                                <div class="feature-card">
                                    <div class="icon">üîç</div>
                                    <h3 data-translate-key="feature1_title"></h3>
                                    <p data-translate-key="feature1_desc"></p>
                                </div>
                                <div class="feature-card">
                                    <div class="icon">üìñ</div>
                                    <h3 data-translate-key="feature2_title"></h3>
                                    <p data-translate-key="feature2_desc"></p>
                                </div>
                                <div class="feature-card">
                                    <div class="icon">ü§ù</div>
                                    <h3 data-translate-key="feature3_title"></h3>
                                    <p data-translate-key="feature3_desc"></p>
                                </div>
                            </div>
                        </div>
                    </div>`;
            } else if (page === 'about') {
                pageContent = `<div class="page" id="about-page"><div class="content-section">
                    <h1 data-translate-key="about_title_short"></h1>
                    <p style="margin-top: 20px; font-size: 1.1rem;" data-translate-key="about_intro_q"></p>
                    <p style="margin-top: 15px; line-height: 1.8;" data-translate-key="about_intro_p"></p>
                    <h2 style="margin-top: 40px;" data-translate-key="how_it_works_title"></h2>
                    <ul style="margin-top: 20px; font-size: 1.05rem;">
                        <li data-translate-key="step1_farmer_creates"></li>
                        <li data-translate-key="step2_stakeholders_update"></li>
                        <li data-translate-key="step3_you_scan_see"></li>
                    </ul>
                    <h2 style="margin-top: 40px;" data-translate-key="win_for_everyone_title"></h2>
                    <ul style="margin-top: 20px; font-size: 1.05rem;">
                        <li data-translate-key="win_for_you"></li>
                        <li data-translate-key="win_for_farmers"></li>
                        <li data-translate-key="win_for_businesses"></li>
                    </ul>
                </div></div>`;
            } else if (page === 'contact') {
                pageContent = `<div class="page"><div class="content-section">
                    <h1 data-translate-key="contact_title"></h1>
                    <p style="margin-top: 20px; font-size: 1.1rem;" data-translate-key="contact_reach_out"></p>
                    <div style="margin-top: 30px; background: #E8F5E9; padding: 20px; border-radius: 12px;">
                        <p><strong data-translate-key="phone_label"></strong>: +91 7483631905</p>
                        <p><strong data-translate-key="email_label"></strong>: suryaprakash.s0629@gmail.com</p>
                    </div>
                    <h2 style="margin-top: 40px;" data-translate-key="or_send_message"></h2>
                    <div style="margin-top: 20px; background: var(--card-bg); backdrop-filter: blur(10px); padding: 25px; border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.05);">
                        <div style="margin-bottom: 20px;">
                            <label for="contact-name" data-translate-key="name"></label>
                            <div class="input-with-voice">
                                <input type="text" id="contact-name" data-translate-key="name" data-translate-type="placeholder">
                                <button class="voice-input-btn" onclick="startVoiceInput('contact-name')">üé§</button>
                            </div>
                        </div>
                        <div style="margin-bottom: 20px;">
                            <label for="contact-message" data-translate-key="message"></label>
                            <div class="input-with-voice">
                                <textarea id="contact-message" rows="5" data-translate-key="message" data-translate-type="placeholder"></textarea>
                                <button class="voice-input-btn" onclick="startVoiceInput('contact-message')">üé§</button>
                            </div>
                        </div>
                        <button class="cta" onclick="sendContactMessage()" data-translate-key="send_message"></button>
                    </div>
                </div></div>`;
            }
            return nav + pageContent;
        }

        function getRoleSelectionHTML() {
            return `<div class="selection-box">
                <h2 data-translate-key="select_your_role"></h2>
                <div class="role-buttons">
                    <button onclick="selectRole('farmer')" data-translate-key="farmer_role"></button>
                    <button onclick="selectRole('stakeholder')" data-translate-key="stakeholder_role"></button>
                    <button onclick="selectRole('shopkeeper')" data-translate-key="shopkeeper_role"></button>
                    <button onclick="selectRole('customer')" data-translate-key="customer_role"></button>
                </div>
            </div>`;
        }

        function getStakeholderCategoryHTML() {
            return `<div class="selection-box">
                <h2 data-translate-key="select_stakeholder_category"></h2>
                <div class="role-buttons">
                    <button onclick="selectStakeholderCategory('warehouse')" data-translate-key="warehouse_role"></button>
                    <button onclick="selectStakeholderCategory('logistics')" data-translate-key="logistics_role"></button>
                </div>
            </div>`;
        }
        
        function getLoginHTML() {
            return `<div class="selection-box">
                <h2 data-translate-key="sign_in"></h2>
                <div style="margin-top: 20px;">
                    <label for="user-id">User ID</label>
                    <div class="input-with-voice">
                        <input type="text" id="user-id" placeholder="Enter your ID">
                        <button class="voice-input-btn" onclick="startVoiceInput('user-id')">üé§</button>
                    </div>
                </div>
                <div style="margin-top: 12px;">
                    <label for="password">Password</label>
                    <div class="input-with-voice">
                        <input type="password" id="password" placeholder="Enter your password">
                        <button class="voice-input-btn" onclick="startVoiceInput('password')">üé§</button>
                    </div>
                </div>
                <button class="cta" style="margin-top: 20px; width: 100%;" onclick="login()" data-translate-key="login"></button>
            </div>`;
        }

        function getMainAppHTML() {
            return `
                <div class="navbar">
                    <a href="#" class="logo" onclick="showView('website-home')">GREEN CHAIN</a>
                    <div class="nav-right">
                        <select class="language-selector" onchange="changeLanguage(this.value)">
                            <option value="en-US">English</option>
                            <option value="hi-IN">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
                            <option value="kn-IN">‡≤ï‡≤®‡≥ç‡≤®‡≤°</option>
                        </select>
                        <button onclick="logout()" data-translate-key="logout" style="background: var(--primary-gradient); color: white;"></button>
                    </div>
                </div>
                <div class="page" id="app-content"></div>`;
        }

        function renderAppContent() {
            const container = document.getElementById('app-content');
            let content = '';
            
            if (currentRole === 'farmer') {
                const cropOptions = cropMarketData.map(crop => `<option value="${crop.name}">${crop.name}</option>`).join('');
                content = `
                    <h1 data-translate-key="farmer_dashboard_title"></h1>
                    <section class="card">
                        <h2 data-translate-key="submit_and_generate_qr"></h2>
                        <div class="row">
                            <div class="col"><label for="farmer-name" data-translate-key="farmer_name"></label><div class="input-with-voice"><input type="text" id="farmer-name" value="${currentUser.name}" readonly></div></div>
                            <div class="col"><label for="farm-location" data-translate-key="farm_location"></label><div class="input-with-voice"><input type="text" id="farm-location" placeholder="e.g., Punjab, India"><button class="voice-input-btn" onclick="startVoiceInput('farm-location')">üé§</button></div></div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label for="crop-name" data-translate-key="crop_name"></label>
                                <div class="input-with-voice">
                                    <select id="crop-name">
                                        <option value="">Select a Crop</option>
                                        ${cropOptions}
                                    </select>
                                </div>
                            </div>
                            <div class="col"><label for="crop-variety" data-translate-key="variety"></label><div class="input-with-voice"><input type="text" id="crop-variety" placeholder="e.g., Basmati, Alphonso"><button class="voice-input-btn" onclick="startVoiceInput('crop-variety')">üé§</button></div></div>
                        </div>
                        <div class="row">
                             <div class="col"><label for="crop-grade" data-translate-key="crop_grade"></label><div class="input-with-voice"><select id="crop-grade"><option value="A">Grade A</option><option value="B">Grade B</option><option value="C">Grade C</option></select></div></div>
                            <div class="col"><label for="quantity" data-translate-key="quantity_kg"></label><div class="input-with-voice"><input type="number" id="quantity" placeholder="e.g., 100"><button class="voice-input-btn" onclick="startVoiceInput('quantity')">üé§</button></div></div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="harvest-date" data-translate-key="harvest_date"></label><div class="input-with-voice"><input type="date" id="harvest-date"></div></div>
                            <div class="col"><label for="expected-price" data-translate-key="expected_price"></label><div class="input-with-voice"><input type="number" id="expected-price" placeholder="e.g., 25"><button class="voice-input-btn" onclick="startVoiceInput('expected-price')">üé§</button></div></div>
                        </div>
                        <button class="cta" style="margin-top: 20px;" onclick="submitCropDetails()" data-translate-key="submit_and_generate_qr"></button>
                    </section>
                    <section class="card" id="qr-result-section" style="display: none;">
                        <h2 data-translate-key="record_created_successfully"></h2>
                        <p><strong data-translate-key="record_id"></strong> <span id="generated-record-id"></span></p>
                        <div style="margin: 20px 0;"><div id="qrcode" class="qr-wrap"></div></div>
                        <button class="cta" onclick="downloadQRCode()" data-translate-key="download_qr"></button>
                    </section>`;
            } else if (currentRole === 'warehouse') {
                 content = `
                    <h1 data-translate-key="warehouse_dashboard_title"></h1>
                    <section class="card">
                        <h2 data-translate-key="enter_record_id"></h2>
                        <div class="input-with-voice">
                            <input type="text" id="warehouse-record-id" placeholder="e.g., FARM-1234">
                            <button class="voice-input-btn" onclick="startVoiceInput('warehouse-record-id')">üé§</button>
                        </div>
                        <button class="cta" style="margin-top: 12px;" onclick="fetchRecordForUpdate('warehouse')" data-translate-key="fetch_record"></button>
                    </section>
                    <section class="card" id="warehouse-update-section" style="display: none;">
                        <h2 data-translate-key="fetched_record_details"></h2>
                        <div class="record-details" id="warehouse-record-details"></div>
                        <h2 style="margin-top: 20px;" data-translate-key="update_record"></h2>
                        <div class="row">
                            <div class="col"><label for="warehouse-name" data-translate-key="warehouse_name"></label><div class="input-with-voice"><input type="text" id="warehouse-name" value="${currentUser.name}" readonly></div></div>
                            <div class="col"><label for="storage-fees" data-translate-key="storage_fees"></label><div class="input-with-voice"><input type="number" id="storage-fees" placeholder="e.g., 500"><button class="voice-input-btn" onclick="startVoiceInput('storage-fees')">üé§</button></div></div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="date-in" data-translate-key="date_in"></label><input type="date" id="date-in"></div>
                            <div class="col"><label for="date-out" data-translate-key="date_out"></label><input type="date" id="date-out"></div>
                        </div>
                        <div><label for="storage-temp" data-translate-key="storage_temp"></label><div class="input-with-voice"><input type="text" id="storage-temp" placeholder="e.g., 4¬∞C, 2-5¬∞C"><button class="voice-input-btn" onclick="startVoiceInput('storage-temp')">üé§</button></div></div>
                        <button class="cta" style="margin-top: 20px;" onclick="updateWarehouseRecord()" data-translate-key="update_record"></button>
                    </section>`;
            } else if (currentRole === 'logistics') {
                content = `
                    <h1 data-translate-key="logistics_dashboard_title"></h1>
                    <section class="card">
                        <h2 data-translate-key="enter_record_id"></h2>
                        <div class="input-with-voice"><input type="text" id="logistics-record-id" placeholder="e.g., FARM-1234"><button class="voice-input-btn" onclick="startVoiceInput('logistics-record-id')">üé§</button></div>
                        <button class="cta" style="margin-top: 12px;" onclick="fetchRecordForUpdate('logistics')" data-translate-key="fetch_record"></button>
                    </section>
                    <section class="card" id="logistics-update-section" style="display: none;">
                        <h2 data-translate-key="fetched_record_details"></h2>
                        <div class="record-details" id="logistics-record-details"></div>
                        <h2 style="margin-top: 20px;" data-translate-key="update_record"></h2>
                        <div class="row">
                            <div class="col"><label for="transport-vehicle-id" data-translate-key="transport_vehicle_id"></label><div class="input-with-voice"><input type="text" id="transport-vehicle-id" value="${currentUser.name}" readonly></div></div>
                            <div class="col"><label for="vehicle-number" data-translate-key="vehicle_number"></label><div class="input-with-voice"><input type="text" id="vehicle-number" placeholder="e.g., PB08AB1234"><button class="voice-input-btn" onclick="startVoiceInput('vehicle-number')">üé§</button></div></div>
                        </div>
                        <div><label for="driver-name" data-translate-key="driver_name"></label><div class="input-with-voice"><input type="text" id="driver-name" placeholder="e.g., Rajesh Kumar"><button class="voice-input-btn" onclick="startVoiceInput('driver-name')">üé§</button></div></div>
                        <button class="cta" style="margin-top: 20px;" onclick="updateLogisticsRecord()" data-translate-key="update_record"></button>
                    </section>`;
            } else if (currentRole === 'shopkeeper') {
                 content = `
                    <h1 data-translate-key="shopkeeper_dashboard_title"></h1>
                    <section class="card">
                        <h2 data-translate-key="enter_record_id"></h2>
                        <div class="input-with-voice"><input type="text" id="shopkeeper-record-id" placeholder="e.g., FARM-1234"><button class="voice-input-btn" onclick="startVoiceInput('shopkeeper-record-id')">üé§</button></div>
                        <button class="cta" style="margin-top: 12px;" onclick="fetchRecordForUpdate('shopkeeper')" data-translate-key="fetch_record"></button>
                    </section>
                    <section class="card" id="shopkeeper-update-section" style="display: none;">
                        <h2 data-translate-key="fetched_record_details"></h2>
                        <div class="record-details" id="shopkeeper-record-details"></div>
                        <h2 style="margin-top: 20px;" data-translate-key="update_record"></h2>
                        <div class="row">
                            <div class="col"><label for="stock-received" data-translate-key="stock_received"></label><div class="input-with-voice"><input type="number" id="stock-received" placeholder="e.g., 95"><button class="voice-input-btn" onclick="startVoiceInput('stock-received')">üé§</button></div></div>
                            <div class="col"><label for="purchase-price" data-translate-key="purchase_price"></label><div class="input-with-voice"><input type="number" id="purchase-price" placeholder="e.g., 35"><button class="voice-input-btn" onclick="startVoiceInput('purchase-price')">üé§</button></div></div>
                        </div>
                        <div><label for="spoilage-wastage" data-translate-key="spoilage_wastage"></label><div class="input-with-voice"><input type="number" id="spoilage-wastage" placeholder="e.g., 5"><button class="voice-input-btn" onclick="startVoiceInput('spoilage-wastage')">üé§</button></div></div>
                        <button class="cta" style="margin-top: 20px;" onclick="updateShopkeeperRecord()" data-translate-key="add_purchase_to_chain"></button>
                    </section>`;
            } else if (currentRole === 'customer') {
                content = `
                    <h1 data-translate-key="customer_dashboard_title"></h1>
                    <section class="card">
                        <h2 data-translate-key="enter_record_id"></h2>
                        <div class="input-with-voice"><input type="text" id="customer-record-id" placeholder="e.g., FARM-1234"><button class="voice-input-btn" onclick="startVoiceInput('customer-record-id')">üé§</button></div>
                        <button class="cta" style="margin-top: 12px;" onclick="fetchCustomerRecord()" data-translate-key="view_record"></button>
                    </section>
                    <section class="card" id="customer-record-section" style="display: none;">
                        <h2 data-translate-key="initial_record_details"></h2>
                        <div class="record-details" id="customer-initial-details"></div>
                        <h2 style="margin-top: 20px;" data-translate-key="complete_journey"></h2>
                        <div id="customer-journey-timeline"></div>
                    </section>`;
            }
            container.innerHTML = content;
            
            // Add event listeners specifically for the farmer dashboard after it's rendered
            if (currentRole === 'farmer') {
                document.getElementById('expected-price').addEventListener('change', validateExpectedPrice);
                document.getElementById('crop-name').addEventListener('change', updatePricePlaceholder);
            }

            updateTextForLanguage();
        }

        // --- FARMER-SPECIFIC FUNCTIONS FOR PRICE VALIDATION ---
        function updatePricePlaceholder() {
            const priceInput = document.getElementById('expected-price');
            priceInput.value = ''; // Clear previous price on crop change
            const selectedCropName = document.getElementById('crop-name').value;
            const crop = cropMarketData.find(c => c.name === selectedCropName);
            if(crop){
                priceInput.placeholder = `Market price: ‚Çπ${crop.price}`;
            } else {
                priceInput.placeholder = 'e.g., 25';
            }
        }

        function validateExpectedPrice() {
            const priceInput = document.getElementById('expected-price');
            const selectedCropName = document.getElementById('crop-name').value;
            
            if (!selectedCropName || !priceInput.value) return;

            const crop = cropMarketData.find(c => c.name === selectedCropName);
            if (!crop) return;

            const marketPrice = crop.price;
            const enteredPrice = parseFloat(priceInput.value);
            const limit = 15; // The +/- range
            const minPrice = marketPrice - limit;
            const maxPrice = marketPrice + limit;

            let adjustedPrice = enteredPrice;
            let wasAdjusted = false;

            if (enteredPrice > maxPrice) {
                adjustedPrice = maxPrice;
                wasAdjusted = true;
            } else if (enteredPrice < minPrice && enteredPrice >= 0) {
                 adjustedPrice = minPrice < 0 ? 0.01 : minPrice;
                 wasAdjusted = true;
            }

            if (wasAdjusted) {
                priceInput.value = adjustedPrice.toFixed(2);
                showNotification(translate('price_adjusted_notification', {min: minPrice.toFixed(2), max: maxPrice.toFixed(2)}), 'error');
            }
        }

        // --- ROLE AND CATEGORY SELECTION ---
        function selectRole(role) {
            currentRole = role;
            if (role === 'stakeholder') {
                showView('stakeholder-category-selection');
            } else {
                showView('login');
            }
        }

        function selectStakeholderCategory(category) {
            currentRole = category; // The specific role is 'warehouse' or 'logistics'
            showView('login');
        }

        // --- LOGIN FUNCTIONALITY ---
        function login() {
            const userId = document.getElementById('user-id').value;
            const password = document.getElementById('password').value;
            const user = userAccounts.find(acc => acc.id === userId && acc.password === password);

            if (!user) {
                showNotification(translate('error_login_failed'), 'error');
                return;
            }

            if (user.role !== currentRole) {
                showNotification(translate('error_role_mismatch'), 'error');
                return;
            }

            currentUser = user;
            showNotification(translate('success_login'), 'success');
            showView(`app-${currentRole}`);
        }

        function logout() {
            currentUser = null;
            currentRole = null;
            showView('website-home');
        }

        // --- SUPPLY CHAIN RECORD FUNCTIONS ---
        function submitCropDetails() {
            const recordId = 'FARM-' + Math.floor(1000 + Math.random() * 9000);
            const record = {
                id: recordId,
                farmerName: document.getElementById('farmer-name').value,
                farmLocation: document.getElementById('farm-location').value,
                cropName: document.getElementById('crop-name').value,
                cropVariety: document.getElementById('crop-variety').value,
                cropGrade: document.getElementById('crop-grade').value,
                quantity: document.getElementById('quantity').value,
                harvestDate: document.getElementById('harvest-date').value,
                expectedPrice: document.getElementById('expected-price').value,
                chain: [{
                    action: 'Harvested',
                    by: document.getElementById('farmer-name').value,
                    timestamp: new Date().toISOString(),
                    details: `Harvested ${document.getElementById('quantity').value}kg of ${document.getElementById('crop-name').value}`
                }]
            };
            
            supplyChainRecords.push(record);
            localStorage.setItem('supplyChainRecords', JSON.stringify(supplyChainRecords));
            
            document.getElementById('generated-record-id').textContent = recordId;
            document.getElementById('qr-result-section').style.display = 'block';
            
            const qrElement = document.getElementById('qrcode');
            qrElement.innerHTML = '';
            new QRCode(qrElement, { text: recordId, width: 200, height: 200 });
            
            showNotification(translate('success_record_created'), 'success');
        }

        function downloadQRCode() {
            const canvas = document.querySelector('#qrcode canvas');
            if(!canvas) return;
            const url = canvas.toDataURL('image/png');
            const a = document.createElement('a');
            a.href = url;
            a.download = `qrcode-${document.getElementById('generated-record-id').textContent}.png`;
            a.click();
        }

        function fetchRecordForUpdate(role) {
            const recordId = document.getElementById(`${role}-record-id`).value;
            const record = supplyChainRecords.find(r => r.id === recordId);
            
            if (record) {
                document.getElementById(`${role}-record-details`).innerHTML = `
                    <p><strong>${translate('crop_name')}:</strong> ${record.cropName} (${record.cropVariety})</p>
                    <p><strong>${translate('quantity_kg')}:</strong> ${record.quantity}kg</p>
                    <p><strong>${translate('harvest_date')}:</strong> ${record.harvestDate}</p>`;
                document.getElementById(`${role}-update-section`).style.display = 'block';
            } else {
                showNotification(translate('error_record_not_found'), 'error');
                document.getElementById(`${role}-update-section`).style.display = 'none';
            }
        }
        
        function clearUpdateForm(role) {
            document.getElementById(`${role}-record-id`).value = '';
            document.getElementById(`${role}-update-section`).style.display = 'none';
            const form = document.getElementById(`${role}-update-section`);
            if (form) {
                form.querySelectorAll('input[type="text"], input[type="number"], input[type="date"]').forEach(input => {
                    if (!input.readOnly) input.value = '';
                });
            }
        }


        function updateWarehouseRecord() {
            const recordId = document.getElementById('warehouse-record-id').value;
            const record = supplyChainRecords.find(r => r.id === recordId);
            if (record) {
                record.chain.push({
                    action: 'Stored', by: document.getElementById('warehouse-name').value, timestamp: new Date().toISOString(),
                    details: `Stored from ${document.getElementById('date-in').value} to ${document.getElementById('date-out').value}`
                });
                localStorage.setItem('supplyChainRecords', JSON.stringify(supplyChainRecords));
                showNotification(translate('success_record_updated'), 'success');
                clearUpdateForm('warehouse');
            }
        }
        
        function updateLogisticsRecord() {
            const recordId = document.getElementById('logistics-record-id').value;
            const record = supplyChainRecords.find(r => r.id === recordId);
            if (record) {
                record.chain.push({
                    action: 'Transported', by: document.getElementById('transport-vehicle-id').value, timestamp: new Date().toISOString(),
                    details: `Transported by ${document.getElementById('driver-name').value} (Vehicle: ${document.getElementById('vehicle-number').value})`
                });
                localStorage.setItem('supplyChainRecords', JSON.stringify(supplyChainRecords));
                showNotification(translate('success_record_updated'), 'success');
                clearUpdateForm('logistics');
            }
        }

        function updateShopkeeperRecord() {
            const recordId = document.getElementById('shopkeeper-record-id').value;
            const record = supplyChainRecords.find(r => r.id === recordId);
            if (record) {
                record.chain.push({
                    action: 'Purchased', by: currentUser.name, timestamp: new Date().toISOString(),
                    details: `Purchased ${document.getElementById('stock-received').value}kg at ‚Çπ${document.getElementById('purchase-price').value}/kg`
                });
                localStorage.setItem('supplyChainRecords', JSON.stringify(supplyChainRecords));
                showNotification(translate('success_purchase_added'), 'success');
                clearUpdateForm('shopkeeper');
            }
        }
        
        function fetchCustomerRecord() {
            const recordId = document.getElementById('customer-record-id').value;
            const record = supplyChainRecords.find(r => r.id === recordId);
            const detailsContainer = document.getElementById('customer-record-section');

            if (record) {
                document.getElementById('customer-initial-details').innerHTML = `
                    <p><strong data-translate-key="farmer_name"></strong>: ${record.farmerName}</p>
                    <p><strong data-translate-key="farm_location"></strong>: ${record.farmLocation}</p>
                    <p><strong data-translate-key="crop_name"></strong>: ${record.cropName} (${record.cropVariety}) - ${record.cropGrade}</p>
                    <p><strong data-translate-key="quantity_kg"></strong>: ${record.quantity}kg</p>
                    <p><strong data-translate-key="harvest_date"></strong>: ${record.harvestDate}</p>
                `;
                
                let timelineHTML = record.chain.map(entry => {
                    const date = new Date(entry.timestamp).toLocaleString();
                    return `<div class="chain-entry">
                            <p><strong>${entry.action}</strong> by ${entry.by} on ${date}</p>
                            <p class="small">${entry.details}</p>
                        </div>`;
                }).join('');
                
                document.getElementById('customer-journey-timeline').innerHTML = timelineHTML;
                detailsContainer.style.display = 'block';
            } else {
                showNotification(translate('error_record_not_found'), 'error');
                detailsContainer.style.display = 'none';
            }
            updateTextForLanguage();
        }

        // --- TRANSLATION AND TTS FUNCTIONS ---
        function changeLanguage(langCode) {
            currentLanguage = langCode;
            updateTextForLanguage();
        }

        function translate(key, replacements = {}) {
            let text = translations[currentLanguage]?.[key] || translations['en-US'][key] || key;
            for (const placeholder in replacements) {
                text = text.replace(new RegExp(`\\{${placeholder}\\}`, 'g'), replacements[placeholder]);
            }
            return text;
        }

        function updateTextForLanguage() {
            document.querySelectorAll('[data-translate-key]').forEach(el => {
                const key = el.dataset.translateKey;
                const translation = translate(key);
                if (el.dataset.translateType === 'placeholder') {
                    el.placeholder = translation;
                } else {
                    el.innerHTML = translation;
                }
            });
            document.querySelectorAll('.language-selector').forEach(sel => sel.value = currentLanguage);
            addSpeakerIcons();
        }

        function addSpeakerIcons() {
            document.querySelectorAll('.tts-button').forEach(btn => btn.remove());
            document.querySelectorAll('h1, h2, h3, label, li, p').forEach(el => {
                const text = el.textContent.trim();
                // A quick check to avoid adding speakers to elements with only emojis
                if (text && text.length > 3) {
                    const btn = document.createElement('button');
                    btn.className = 'tts-button';
                    btn.innerHTML = 'üîä';
                    btn.onclick = (e) => { e.stopPropagation(); speakText(text); };
                    el.appendChild(btn);
                }
            });
        }

        function speakText(text) {
            if ('speechSynthesis' in window) {
                window.speechSynthesis.cancel(); 
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = currentLanguage;
                window.speechSynthesis.speak(utterance);
            }
        }
        
        function startVoiceInput(inputId) {
            if (!('webkitSpeechRecognition' in window)) {
                showNotification(translate('voice_not_supported'), 'error');
                return;
            }
            const recognition = new webkitSpeechRecognition();
            recognition.lang = currentLanguage;
            const voiceStatus = document.getElementById('voice-status');
            voiceStatus.textContent = translate('voice_listening');
            voiceStatus.classList.add('show', 'listening');

            recognition.onresult = (event) => {
                document.getElementById(inputId).value = event.results[0][0].transcript;
            };
            recognition.onend = () => {
                voiceStatus.textContent = translate('voice_ready');
                voiceStatus.classList.remove('listening');
                setTimeout(() => voiceStatus.classList.remove('show'), 2000);
            };
            recognition.onerror = (event) => {
                 showNotification(translate('voice_error') + ': ' + event.error, 'error');
            };
            recognition.start();
        }


        // --- UTILITY FUNCTIONS ---
        function createEmojiBackground() {
            const emojis = ['üå±', 'üåø', 'üçÉ', 'ü•¨', 'ü•¶', 'ü•ï', 'üåΩ', 'üçÖ', 'ü•î', 'üåæ', 'üçé', 'üçá'];
            const container = document.getElementById('emoji-background');
            container.innerHTML = '';
            for (let i = 0; i < 30; i++) { // Increased emoji count
                const emoji = document.createElement('div');
                emoji.className = 'emoji';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                emoji.style.left = Math.random() * 100 + '%';
                emoji.style.animationDuration = (Math.random() * 15 + 20) + 's';
                emoji.style.animationDelay = Math.random() * 25 + 's';
                emoji.style.fontSize = (Math.random() * 2 + 1.5) + 'rem';
                container.appendChild(emoji);
            }
        }

        function showNotification(message, type) {
            const notificationArea = document.getElementById('notification-area');
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            notificationArea.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 10);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notificationArea.removeChild(notification), 300);
            }, 3000);
        }

        function sendContactMessage() {
            if (document.getElementById('contact-name').value && document.getElementById('contact-message').value) {
                showNotification(translate('message_sent'), 'success');
                document.getElementById('contact-name').value = '';
                document.getElementById('contact-message').value = '';
            }
        }
    </script>
</body>
</html>
